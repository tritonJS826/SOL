/*
 * ITPM admin panel API
 *
 * Admin panel for Telegram chat bot, which will help to improve user interactions with the chats.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Level
    /// </summary>
    [DataContract]
    public partial class Level :  IEquatable<Level>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Level" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Level() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Level" /> class.
        /// </summary>
        /// <param name="waves">waves (required).</param>
        /// <param name="title">title (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="world">world (required).</param>
        public Level(List<Wave> waves = default(List<Wave>), string title = default(string), string description = default(string), int world = default(int))
        {
            // to ensure "waves" is required (not null)
            if (waves == null)
            {
                throw new InvalidDataException("waves is a required property for Level and cannot be null");
            }
            else
            {
                this.Waves = waves;
            }

            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for Level and cannot be null");
            }
            else
            {
                this.Title = title;
            }

            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for Level and cannot be null");
            }
            else
            {
                this.Description = description;
            }

            // to ensure "world" is required (not null)
            if (world == null)
            {
                throw new InvalidDataException("world is a required property for Level and cannot be null");
            }
            else
            {
                this.World = world;
            }

        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public int Id { get; private set; }

        /// <summary>
        /// Gets or Sets Waves
        /// </summary>
        [DataMember(Name="waves", EmitDefaultValue=true)]
        public List<Wave> Waves { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets World
        /// </summary>
        [DataMember(Name="world", EmitDefaultValue=true)]
        public int World { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Level {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Waves: ").Append(Waves).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  World: ").Append(World).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Level);
        }

        /// <summary>
        /// Returns true if Level instances are equal
        /// </summary>
        /// <param name="input">Instance of Level to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Level input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Waves == input.Waves ||
                    this.Waves != null &&
                    input.Waves != null &&
                    this.Waves.SequenceEqual(input.Waves)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.World == input.World ||
                    (this.World != null &&
                    this.World.Equals(input.World))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Waves != null)
                    hashCode = hashCode * 59 + this.Waves.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.World != null)
                    hashCode = hashCode * 59 + this.World.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Title (string) maxLength
            if(this.Title != null && this.Title.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be less than 255.", new [] { "Title" });
            }


            yield break;
        }
    }

}
